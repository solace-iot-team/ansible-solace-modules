
# ---------------------------------------------------------------------------------------------
# MIT License
#
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# ---------------------------------------------------------------------------------------------

-
  name: "Create Solace Cloud Service"
  hosts: "{{ SOLACE_CLOUD_ACCOUNTS }}"
  gather_facts: no
  any_errors_fatal: true

  vars_files:
    - "../lib/solace-cloud-service.vars.yml"

  tasks:

    - name: "Create Solace Cloud Service"
      solace_cloud_service:
        api_token: "{{ api_token_all_permissions }}"
        name: "{{ sc_service.name }}"
        settings:
          msgVpnName: "{{ sc_service.msgVpnName}}"
          datacenterId: "{{ sc_service.datacenterId }}"
          serviceTypeId: "{{ sc_service.serviceTypeId}}"
          serviceClassId: "{{ sc_service.serviceClassId }}"
          attributes: "{{ sc_service.attributes | default(omit) }}"
        state: present
      register: result

    - set_fact:
        sc_service_id: "{{ result.response.serviceId }}"

    - name: "Wait for Service Provisioning to Complete"
      solace_cloud_get_service:
        api_token: "{{ api_token_all_permissions }}"
        service_id: "{{ sc_service_id }}"
      register: result
      until: "result.rc != 0 or result.response.creationState == 'completed'"
      retries: 40
      delay: 30

    - set_fact:
        sc_service_info: "{{ result.response }}"

    - name: "Get Solace Cloud Service Inventory"
      solace_cloud_get_facts:
        from_dict: "{{ sc_service_info }}"
        get_formattedHostInventory:
          host_entry: "{{ sc_service.name }}"
          api_token: "{{ api_token_all_permissions }}"
          meta:
            service_name: "{{ sc_service_info.name }}"
            sc_service_id: "{{ sc_service_info.serviceId }}"
            datacenterId: "{{ sc_service_info.datacenterId }}"
            serviceTypeId: "{{ sc_service_info.serviceTypeId}}"
            serviceClassId: "{{ sc_service_info.serviceClassId }}"
            serviceClassDisplayedAttributes: "{{ sc_service_info.serviceClassDisplayedAttributes }}"
      register: result

    - name: "Save Solace Cloud Service Inventory to File"
      local_action:
        module: copy
        content: "{{ result.facts.formattedHostInventory | to_nice_json }}"
        dest: "./lib/broker.inventories/cloud.broker.inventory.json"
      changed_when: false

###
# The End.
