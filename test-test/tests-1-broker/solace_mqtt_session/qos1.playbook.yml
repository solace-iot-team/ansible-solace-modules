#!/bin/bash
# ---------------------------------------------------------------------------------------------
# MIT License
#
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# ---------------------------------------------------------------------------------------------

-
  name: "TEST: QoS=1 subscriptions, MQTT Queue = on"
  hosts: "{{ brokers }}"
  gather_facts: no
  any_errors_fatal: true
  module_defaults:
    solace_gather_facts:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      solace_cloud_api_token: "{{ solace_cloud_api_token | default(omit) }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
    solace_client_username:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace_mqtt_session:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
      virtual_router: "{{ virtual_router }}"
    solace_mqtt_session_subscription:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
      virtual_router: "{{ virtual_router }}"
    solace_get_mqtt_sessions:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
    solace_get_mqtt_session_subscriptions:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
      virtual_router: "{{ virtual_router }}"
    solace_get_queues:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace_get_magic_queues:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"


  vars:
    mqtt_client_username: "ansible_solace_test_mqtt_qos_1_cu"

  tasks:

    # # DEBUG
    # - meta: end_play

    - include_vars:
        file: "./lib/mqtt-qos1.vars.yml"
        name: mqtt

    - name: Gather Solace Facts
      solace_gather_facts:

    - name: Create Client Username
      solace_client_username:
        name: "{{ mqtt_client_username }}"
        settings:
          aclProfileName: "default"
          clientProfileName: "default"
          password: "{{ mqtt_client_username }}"
        state: present

    - name: Adding Mqtt Sessions
      include_tasks: ./lib/mqtt-qos1.tasks.yml
      loop: "{{ mqtt.mqtt_sessions }}"
      loop_control:
        loop_var: mqtt_session

    - name: "Get MQTT Magic Queues"
      solace_get_magic_queues:
        where_name: "#mqtt/*"
      register: result

    - set_fact:
        magic_queues: "{{ result.result_list }}"

    - name: "Save Queues to File"
      local_action:
        module: copy
        content: "{{ magic_queues | to_nice_json }}"
        dest: "./tmp/magic_queues.{{ inventory_hostname }}.json"
      no_log: true
      changed_when: false

    - name: "Check: All magic Queues are ON/ON"
      fail:
        msg: "Magic queue: ingress or egress is 'Down' for magic_queue: {{ magic_queue.name }} "
      when: magic_queue.info['ingress-config-status'] == "Down" or magic_queue.info['egress-config-status'] == "Down"
      loop: "{{ magic_queues }}"
      loop_control:
        loop_var: magic_queue

    # DEBUG
    - meta: end_play



    # DEBUG
    - meta: end_play

# get all queues
# see if magic queues are included
# check if magic queues are enabled

    - name: Get Config List of MQTT Sessions
      solace_get_mqtt_sessions:
        msg_vpn: "{{ vpn }}"
        query_params:
          where:
            - "mqttSessionClientId==ansible-solace_test_mqtt*"
          select:
            - "mqttSessionClientId"
            - "mqttSessionVirtualRouter"
            - "enabled"
            - "owner"
      register: get_sessions_result

    - name: Fail when new sessions list count != 4
      fail:
        msg: "new mqtt sessions count != 4"
      when: get_sessions_result.result_list_count != 4

    - name: Get Monitor List of MQTT Sessions
      solace_get_mqtt_sessions:
        msg_vpn: "{{ vpn }}"
        api: monitor
        query_params:
          where:
            - "mqttSessionClientId==ansible-solace_test_mqtt*"
          select:
      register: get_sessions_monitor_result

    - name: Print Monitor Result of MQTT Sessions
      debug:
        msg: "{{ get_sessions_monitor_result.result_list }}"

    - name: Deleting Mqtt Sessions
      solace_mqtt_session:
        name: "{{ item.mqttSessionClientId }}"
        state: absent
      loop: "{{ target_list.mqttSessions }}"

    - name: Remove Client Username
      solace_client_username:
        name: "{{ mqtt_client_username }}"
        state: absent


###
# The End.
