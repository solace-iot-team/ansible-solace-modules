
# ---------------------------------------------------------------------------------------------
# MIT License
#
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# ---------------------------------------------------------------------------------------------

-
  name: "Exception_Test_3: solace_cloud_service: test for Delta Changes"
  hosts: "{{ SOLACE_CLOUD_ACCOUNTS }}"
  gather_facts: no
  any_errors_fatal: true

  tasks:

    # DEBUG
    # - meta: end_play

    - include_vars:
        file: "./lib/solace-cloud-services.vars.yml"
        name: sc_services

    # - debug:
    #     msg: "{{ sc_services }}"

    - set_fact:
        sc_service: "{{ sc_services.solace_cloud_services[0] }}"
        sc_service_name: as-test-delta-settings
        sc_service_vpn: as-test-delta-settings

    - name: "Exception_Test: Create New Service"
      solace_cloud_service:
        api_token: "{{ api_token_all_permissions }}"
        name: "{{ sc_service_name }}"
        settings:
          msgVpnName: "{{ sc_service_vpn }}"
          datacenterId: "{{ sc_service.datacenterId }}"
          serviceTypeId: "{{ sc_service.serviceTypeId}}"
          serviceClassId: "{{ sc_service.serviceClassId }}"
          attributes:
            customizedMessagingPorts:
              serviceSmfPlainTextListenPort: 55555
              serviceSmfCompressedListenPort: 55003
              serviceSmfTlsListenPort: 55443
        state: present
      register: result

    - set_fact:
        sc_service_id: "{{ result.response.serviceId }}"

    - name: "Exception_Test: Wait for Service Provisioning to Complete"
      solace_cloud_get_service:
        api_token: "{{ api_token_all_permissions }}"
        service_id: "{{ sc_service_id }}"
      register: result
      until: "result.rc != 0 or result.response.creationState == 'completed'"
      # wait max for 40 * 30 seconds, then give up
      retries: 40
      delay: 30 # Every 30 seconds
      no_log: true

    - name: "Exception_Test: No Update"
      solace_cloud_service:
        api_token: "{{ api_token_all_permissions }}"
        name: "{{ sc_service.name }}"
        settings:
          msgVpnName: "{{ sc_service.msgVpnName}}"
          datacenterId: "{{ sc_service.datacenterId }}"
          serviceTypeId: "{{ sc_service.serviceTypeId}}"
          serviceClassId: "{{ sc_service.serviceClassId }}"
        state: present
      register: result

    - name: "Exception_Test: Update msgVpnName"
      solace_cloud_service:
        api_token: "{{ api_token_all_permissions }}"
        name: "Ansible-Solace-Test-Service-1"
        settings:
          msgVpnName: "{{ sc_service.msgVpnName}}-update"
          datacenterId: "{{ sc_service.datacenterId }}"
          serviceTypeId: "{{ sc_service.serviceTypeId}}"
          serviceClassId: "{{ sc_service.serviceClassId }}"
        state: present
      register: result
      failed_when: result.rc != 1 or result.delta == None or result.delta.msgVpnName == None

    - name: "Exception_Test: Update Ports"
      solace_cloud_service:
        api_token: "{{ api_token_all_permissions }}"
        name: "{{ sc_service_name }}"
        settings:
          msgVpnName: "{{ sc_service_vpn }}"
          datacenterId: "{{ sc_service.datacenterId }}"
          serviceTypeId: "{{ sc_service.serviceTypeId}}"
          serviceClassId: "{{ sc_service.serviceClassId }}"
          attributes:
            customizedMessagingPorts:
              serviceSmfPlainTextListenPort: 1111
        state: present
      register: result
      failed_when: result.rc != 1 or result.delta.attributes.customizedMessagingPorts.serviceSmfPlainTextListenPort == None

    - name: "Exception_Test: Delete by Service Id"
      solace_cloud_service:
        api_token: "{{ api_token_all_permissions }}"
        service_id: "{{ sc_service_id }}"
        state: absent
      register: result
      failed_when: result.rc != 0

###
# The End.
